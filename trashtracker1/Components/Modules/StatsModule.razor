@using trashtracker1.Components.HelperServices
@inject PredictionsHelperService PredictionsService

<div class="col-span-2 row-span-3 flex flex-col gap-5">
    <div class="text-md flex flex-row gap-5 w-full align-items-center">
        <h2>Je bekijkt nu: @title</h2>
        <select @onchange="PredictionsService.OnSelectChange" class="p-3 w-full rounded-xl">
            <option value="History">Historie</option>
            <option value="Future">Toekomst</option>
        </select>
    </div>
    <div class="bg-white rounded-xl shadow-xl p-4 h-full">
        <h1 class="text-md">Locatie met meeste afval:</h1>
        <p class="text-sm">@litterFilters.location</p>
    </div>
    <div class="bg-white rounded-xl shadow-xl p-4 h-full">
        <h1 class="text-md">Hoeveelheid afval op locatie met meeste afval:</h1>
        <p class="text-sm">@litterFilters.LitterAmount</p>
    </div>
    <div class="bg-white rounded-xl shadow-xl p-4 h-full">
        <h1 class="text-md">Hoeveelheid afval op gefilterde locatie:</h1>
        <p class="text-sm">@litterFilters.filteredLitterAmount</p>
    </div>
</div>

@code {
    
    [Inject] IJSRuntime JSRuntime { get; set; }

    [Inject]
    private LitterFilters litterFilters { get; set; }
    private string title;

    protected override void OnInitialized()
    {
        litterFilters.location = litterFilters.MostLitterLocation();
        litterFilters.LitterAmount = litterFilters.MostLitterAmount();
        litterFilters.filteredLitterAmount = litterFilters.FilteredLitterAmount();
        title = PredictionsService.TitleData;
        PredictionsService.OnTitleChanged += UpdateTitle;
    }
    public void GetLitterData(int days, string typeOfLitter)
    {
        litterFilters.litterData.Clear();
        for (int i = 0; i < days; i++)
        {
            litterFilters.litterData.Add(litterFilters.rnd.Next(0, 100));
        }
        litterFilters.Values = litterFilters.litterData.ToArray();
    }

    private void UpdateTitle()
    {
        title = PredictionsService.TitleData;
        InvokeAsync(StateHasChanged); // Ensure UI updates
    }

    public void Dispose()
    {
        PredictionsService.OnTitleChanged -= UpdateTitle;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetLitterData(7, "everybody");
            litterFilters.GetLitterData(7, 1);
            await JSRuntime.InvokeVoidAsync("renderLineChart", litterFilters.Labels, litterFilters.Values, litterFilters.ChartTitle);
        }
    }
    
    //write a function to change the @TitleData based on the selected item in the select element
  
    


}