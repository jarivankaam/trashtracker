@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Home</PageTitle>

<div class="p-12">

    <div class="grid grid-cols-6 grid-rows-5 gap-x-12 gap-y-6 h-full">
        @* MAP *@
        <div class="col-span-3 row-span-3 bg-white rounded-xl p-2 shadow-xl"></div>

        @* Statestieken *@
        <div class="col-span-2 row-span-3 flex flex-col gap-5">
            <div class="bg-white rounded-xl shadow-xl p-4 h-full">
                <h1 class="text-sm">Locatie met meeste afval:</h1>
                <p class="text-xs">@location</p>
            </div>
            <div class="bg-white rounded-xl shadow-xl p-4 h-full">
                <h1 class="text-sm">Hoeveelheid afval op locatie met meeste afval:</h1>
                <p class="text-xs">@trashAmount</p>
            </div>
            <div class="bg-white rounded-xl shadow-xl p-4 h-full">
                <h1 class="text-sm">Hoeveelheid afval op gefilterde locatie:</h1>
                <p class="text-xs">@filteredTrashAmount</p>
            </div>
        </div>

        @* Favoriete locaties *@
        <div class="col-span-1 row-span-3 bg-white rounded-xl shadow-xl p-4 -ml-6">
            <h1 class="text-sm">Favoriete locaties:</h1>
            <p class="text-xs">(Hier staan favoriete locaties)</p>
        </div>

        @*Grafiekies*@
        <div class="col-span-3 row-span-2 bg-white rounded-xl shadow-xl p-4">
            <canvas id="lineChart" width="800" height="333"></canvas>
        </div>


        @*Filters en feestdagen*@
        <div class="col-span-3 row-span-2 bg-white rounded-xl shadow-xl p-4 flex">
            <div class="flex flex-col gap-2 flex-1">
                <h1>Filters:</h1>
                <input type="range" class="w-1/3" />
                <div class="flex gap-2 flex-wrap">
                    <button class="px-2 py-1 rounded-xl shadow-xl"><p class="text-xs">1 dag</p></button>
                    <button class="px-2 py-1 rounded-xl shadow-xl"><p class="text-xs">3 dagen</p></button>
                    <button class="px-2 py-1 rounded-xl shadow-xl"><p class="text-xs">5 dagen</p></button>
                    <button class="px-2 py-1 rounded-xl shadow-xl"><p class="text-xs">vandaag</p></button>
                </div>
                <div class="flex gap-2 flex-wrap">
                    <button class="px-2 py-1 rounded-xl shadow-xl"><p class="text-xs">Klein afval</p></button>
                    <button class="px-2 py-1 rounded-xl shadow-xl"><p class="text-xs">Medium afval</p></button>
                    <button class="px-2 py-1 rounded-xl shadow-xl"><p class="text-xs">Plastic en chemisch afval</p></button>
                </div>
            </div>
            <div class="flex-1 border-l pl-4">
                <p class="text-xs">Speciale locaties om in de gaten te houden tijdens [feestdag]:</p>
            </div>
        </div>
    </div>
</div>
@code {
    Random rnd = new Random();
    private string location;
    private int trashAmount;
    private int filteredTrashAmount;
    public string MostTrashLocation()
    {

        string location = "Location";

        return location;
    }
    public int MostTrashAmount()
    {

        int trashAmount = rnd.Next(0, 100);

        return trashAmount;
    }
    public int FilteredTrashAmount()
    {

        int filteredTrashAmount = rnd.Next(0, 100);

        return filteredTrashAmount;
    }
    protected override void OnInitialized()
    {
        location = MostTrashLocation();
        trashAmount = MostTrashAmount();
        filteredTrashAmount = FilteredTrashAmount();
    }

    private string[] Labels = new[] { "Ma", "Di", "Wo", "Do", "Vr" };
    private int[] Values = new[] { 4, 6, 3, 8, 2 };
    private string ChartTitle = "Afval per dag";

    [Inject] IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("renderLineChart", Labels, Values, ChartTitle);
        }
    }

    private async Task UpdateChartAsync()
    {
        Labels = new[] { "Ma", "Di", "Wo", "Do", "Vr", "Za", "Zo" };
        Values = new[] { 5, 7, 4, 9, 3, 6, 2 };
        ChartTitle = "Nieuwe Afval Data";

        await JSRuntime.InvokeVoidAsync("updateLineChart", Labels, Values, ChartTitle);
    }
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    let chartInstance = null;

    window.renderLineChart = (labels, data, title) => {
        const ctx = document.getElementById('lineChart').getContext('2d');

        if (chartInstance) {
            chartInstance.destroy();
        }

        chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: title,
                    data: data,
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: title
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    };

    window.updateLineChart = (labels, data, title) => {
        if (!chartInstance) return;
        chartInstance.data.labels = labels;
        chartInstance.data.datasets[0].data = data;
        chartInstance.data.datasets[0].label = title;
        chartInstance.options.plugins.title.text = title;
        chartInstance.update();
    };
</script>
